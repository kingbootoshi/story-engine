---
description: 
globs: 
alwaysApply: true
---
# Story-Engine Project Structure

*Single-API backend designed for unlimited narrative modules*

---

## 1 Repository Layout (top level)

```
story-engine/
├─ .claude/         private Claude settings
├─ .cursor/         dev-container & linting rules
├─ docs/            all project documentation
├─ public/          static assets (videos, images)
├─ scripts/         cli helpers (scaffolding, lint checks)
├─ src/             production source
│  ├─ core/         framework kernel (boot, logger, DI, TRPC bridge)
│  ├─ modules/      domain feature slices (world, character, …)
│  ├─ shared/       cross-cutting types & config
│  └─ server.ts     http entrypoint
├─ supabase/        SQL schema + migrations
└─ ‹config files›   tsconfig.json, package.json, vite.config.ts…
```

Everything that reaches runtime lives under `src/`.  No exceptions.

---

## 2 Core Layer (`src/core`)

Purpose: application‐agnostic services reused by *every* module.

* `bootstrap.ts` discovers modules, mounts routers, wires error middleware.
* `infra/` logging wrapper, DI container, event bus, Supabase client.
* `ai/` thin wrapper around `openpipe/openai`, includes `buildMetadata`.
* `trpc/` shared initialiser, Express-bridge that turns a tRPC router into REST.
* `types/` `EngineModule` interface, generic `DomainEvent`, helpers.

Core never imports module code; modules import core.

---

## 3 Module Layer (`src/modules`)

Each folder is a **vertical slice** with exactly five sub-areas:

```
modules/character/
├─ domain/        schema.ts • ports.ts • events.ts
├─ application/   CharacterService.ts
├─ infra/         ai/ • persistence/ • index.ts (DI registrations)
├─ delivery/      trpc/router.ts
└─ manifest.ts    exported EngineModule
```

Rules:

1. The manifest is the **only** file touched by `bootstrap.ts`.
2. Cross-module communication uses `eventBus`; no direct imports between modules.
3. Adapters (`infra/`) fulfil the interfaces defined in `domain/ports.ts`.

Follow this shape for *worlds*, *locations*, *factions*, and future features.

---

## 4 Shared Layer (`src/shared`)

`shared/config/env.ts` validated environment variables.
`shared/types/` coarse-grained types reused by multiple modules (auth, errors).

Avoid placing business logic here.

---

## 5 Docs Folder (`/docs`)

* `system-overview.md` high-level primer for newcomers.
* `module-authoring.md` step-by-step guide to create a new module (generated earlier).
* `ai-integration.md` mandatory metadata and prompt conventions.
* `logging-guidelines.md` logging contract for contributors.

Keep docs short and source-controlled; no Google Docs drift.

---

## 6 Supabase (`/supabase`)

* `schema.sql` canonical schema snapshot.
* `migrations/` timestamped SQL files; migrations run automatically in CI.
  Name every file `YYYYMMDDHHMM_description.sql`.

---

## 7 Scripts (`/scripts`)

* `create-module.js` scaffolds a fresh module skeleton.
* `lint-logs.ts` CI guardrail enforcing metadata and secret redaction.
* `validate-schema.ts` optional e2e Zod ↔ SQL sync check.

Scripts must be idempotent and runnable on any dev machine.

---

## 8 Adding a New Module (quick route)

1. `pnpm run scaffold <name>` creates `src/modules/<name>/` with TODOs.
2. Fill in `domain/schema.ts` and `ports.ts` first.
3. Implement adapters in `infra/`.
4. Register adapters in `infra/index.ts`.
5. Expose a tRPC router under `delivery/trpc/router.ts`.
6. Complete `manifest.ts` – register service, mount router, subscribe to events.
7. Write migration SQL in `/supabase/migrations/`.
8. Run `pnpm test && pnpm run lint-logs`.

When tests and hooks are green, open a PR; no other files need touching.

---

## 9 Best-practice reminders


* ALWAYS npm run test WHEN CREATING NEW MODULES OR DOING UPDATES
* **Single responsibility** per module: world logic stays in *world*, dialogue in *character*, etc.
* Never bypass DI or call Supabase outside a `*Repo`.
* Always include `correlation` id in logs and AI metadata.
* Function-calling JSON for every AI response; parse once in the adapter.
* Keep `debug` logs silent by default; toggle via `LOG_LEVEL=debug` when needed.

Adhere to this structure and new functionality will integrate seamlessly without refactoring the engine.
