---
description: 
globs: 
alwaysApply: true
---
# Logging Guidelines (Story-Engine)

This document defines *exactly* how and when to emit logs within the backend.
The logger wrapper lives in `src/core/infra/logger.ts`; always obtain it via
`createLogger('<module>')`.

---

## 1 Philosophy

1. **Single source** – one Winston instance, many scoped children.
2. **Action-oriented** – log verbs (`creating world`, `AI call failed`) not nouns.
3. **Context first** – include IDs that let you stitch requests, AI calls and DB rows together.
4. **Zero secrets** – never write passwords, keys, full prompt text, or user PII.
5. **Cheap** – DEBUG stays off in prod unless you’re on a live incident.

---

## 2 Supported Levels

* **error**  → fatal or user-visible failures.
* **warn**   → unusual but non-fatal (“retry later”, “deprecated”).
* **info**   → high-level state changes (startup, module loaded, arc created).
* **http**   → one line per HTTP request *after* completion.
* **debug**  → variable values, SQL, branch decisions.
* **success** (wrapper around `info`) – use for positive milestones (“Arc completed”).

*Anything else is blocked in eslint-rules.*

---

## 3 Always Log

* Application startup and shutdown, including env capability flags.
* Module bootstrap success or failure.
* Every incoming HTTP request (`logger.http`) with method, path, status, duration.
* AI calls: before & after – include `model`, `prompt_id`, `duration_ms`, token usage, and mandatory metadata.
* Database writes and deletes (insert / update / delete).
* Emitted or caught domain events.
* Unhandled exceptions (with stack) and promise rejections.

---

## 4 Never Log

* Secrets: API keys, JWTs, encryption material.
* Full AI prompt text (header info is fine).
* Personally identifying user data or random payload dumps.

---

## 5 Structured Meta Fields

Every log method accepts a single `meta` object. Reserve keys:

```
correlation   – reqId / traceId (always include)
module        – auto-filled by wrapper
world_id      – when operating on a world
arc_id        – when operating on an arc
beat_index    – when generating a beat
ai            – { model, prompt_id, usage }   // AI calls only
duration_ms   – timing for the operation
success       – true | false
```

Add more fields freely; avoid deeply nested structures.

---

## 6 Patterns & Examples

**6.1 HTTP middleware (already wired):**

```ts
app.use((req, _res, next) => {
  logger.http(`${req.method} ${req.path}`, { correlation: reqId });
  next();
});
```

**6.2 AI call wrapper (simplified):**

```ts
const start = Date.now();
const completion = await chat({...});
logger.info('AI call', {
  ai: { model, prompt_id, usage: completion.usage },
  duration_ms: Date.now() - start,
  correlation: ctx.reqId,
  world_id: params.worldId
});
```

**6.3 Service operation:**

```ts
logger.info('Creating world', { name, correlation: ctx.reqId });
try {
  const world = await repo.createWorld({ name, description });
  logger.success('World created', { world_id: world.id, correlation: ctx.reqId });
} catch (err) {
  logger.error('Failed to create world', err, { correlation: ctx.reqId });
  throw err;
}
```

---

## 7 Best Practices

* Instantiate one scoped logger per file: `const log = createLogger('world.service');`.
* Emit *start* and *end* log for any operation longer than 100 ms; attach `duration_ms`.
* Use `debug` for data that changes per request; gate with `if (logLevel==='debug')` inside tight loops.
* Log at the highest level that still allows silent success paths (no `info` for every `SELECT`).
* Sanitize user-supplied strings if you absolutely must include them (max 120 characters).

---

## 8 CI Enforcement

A pre-commit hook runs `scripts/lint-logs.ts` which:

1. Blocks any `logger.log('info' …)` that omits `correlation`.
2. Blocks any AI log without `ai.prompt_id`.
3. Checks for forbidden substrings (`OPENROUTER_API_KEY`, `SUPABASE_ANON_KEY`, etc.).

Keep your log calls compliant and CI will stay green.

---

Follow these rules and logs remain readable, queryable, and privacy-safe as the project scales.
