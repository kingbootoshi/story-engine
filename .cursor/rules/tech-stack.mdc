---
description: 
globs: 
alwaysApply: true
---
# Tech-Stack Overview (Story-Engine – June 2025)

A **backend-only** TypeScript application that exposes both **tRPC** and **REST**; the previous React UI has been removed to focus on a scalable API-first platform.

---

## Core Runtime Libraries

### Backend

* **Express 5** – minimal HTTP surface; all routes mounted by `expressBridge`.
* **tRPC 11** – typed RPC procedures that double as SDK generators.
* **tsyringe** – lightweight dependency-injection container.
* **OpenPipe SDK + OpenRouter** – proxy to Anthropic, GPT-4o-mini, etc.
* **Supabase** – Postgres, auth, and Realtime pub/sub.
* **Winston** – structured logging with colourised console + JSON files.
* **Zod** – validation for DTOs and SQL round-trip types.
* **EventEmitter 3** (pluggable) – in-process event bus; Redis/NATS adapter planned.

### Shared

* **TypeScript 5** – strict mode, ESM, decorators.
* **dotenv** – unified env-file loader; same file consumed by local dev and CI.
* **ES Modules** – no CommonJS, no transpiled build step (`tsx` runtime).

---

## Architectural Patterns

### API Surface

* Author procedures once in *module*/delivery/trpc/**router.ts**.
* `expressBridge` auto-creates REST routes for external clients.
* JSON responses are camel-cased and schema-validated.

### Module System

* Vertical slices under `src/modules/*`; self-contained domain, service, infra and router.
* `EngineModule` manifest exposes DI bindings, REST base path, and event subscriptions.
* Core never imports module code; preserves plugin isolation.

### Database

* Supabase Postgres with **Row-Level Security** for tenant isolation.
* SQL migrations stored in `/supabase/migrations/` (timestamped files).
* Repository adapters use PostgREST via the JS client today; native driver optional.

### AI Integration

* Uniform `chat()` wrapper that enforces **function-calling JSON** and **mandatory metadata** (`module`, `prompt_id`, `correlation`, etc.).
* Prompt builders and JSON schemas live beside adapters for easy versioning.
* Usage, latency and cost routed to OpenPipe analytics out of the box.

### Observability

* One line per HTTP request (`logger.http`).
* One line per AI call (`logger.info` with `ai.*` fields).
* Pre-commit hook blocks missing metadata or leaked secrets.

---

## Development Workflow

1. `pnpm dev:all` – starts Vite HMR for static assets (if any) + API on `3001`.
2. Set env in `.env` (backend) or `VITE_*` (frontend experiments).
3. Scaffold a module: `pnpm run scaffold character`.
4. Run migrations against local Supabase: `supabase db push`.
5. Validate logs and metadata: `pnpm run lint-logs`.
6. Ship PR – CI runs lint, tests, and migration dry-run.

Essential environment variables:

```
OPENROUTER_API_KEY   # required for AI calls
OPENPIPE_API_KEY     # optional, analytics
SUPABASE_URL
SUPABASE_ANON_KEY
LOG_LEVEL            # error | warn | info | http | debug
```

---

## Key Design Choices

* **No build step** – `tsx` executes TS directly; faster cold-starts.
* **Strict JSON schema** from prompt output → prevents brittle regex parsing.
* **Event-driven** – makes it trivial to drop in a distributed bus later.
* **Sparse AI generation** – only three anchor beats are pre-generated to cap token spend.
* **One-file DI registration** per module (`infra/index.ts`) – hot-swappable adapters.

---

## Performance & Scalability Notes

### HTTP Layer

* Async handlers; no blocking work beyond 50 ms accepted – off-load heavier steps to workers when introduced.
* Memory-based rate limiter (`express-rate-limit`) enabled by default; redis store planned.

### Database

* Supabase recommends <100 connections; keep Node worker count sensible or adopt PgBouncer.
* Prefer batched `in` queries over loops; use `select()` only with needed columns.

### AI

* Cache responses keyed by SHA-256(model+prompt) in `ai_cache` table; hit rate \~40 % in dev.
* Include `max_tokens` ceiling in every call to avoid runaway bills.

---

Stick to this stack, follow the module authoring guide, and new narrative systems (Characters, Locations, Factions, etc.) will plug in without rewiring the engine.
