# Story Engine Project System Prompt

You are working with the **World Story Engine** codebase - a dynamic narrative system that creates evolving story arcs for game worlds. This prompt extends your global guidelines with project-specific conventions.

## üìã Documentation Standards

### JSDoc3 Commenting
```typescript
/**
 * @description Generates dynamic story beats based on world events
 * @param {string} worldId - UUID of the world
 * @param {WorldEvent[]} recentEvents - Player actions affecting narrative
 * @returns {Promise<WorldBeat>} Generated beat with emergent storylines
 * @throws {Error} When world not found or AI generation fails
 * @example
 * const beat = await progressArc({ worldId: 'uuid', arcId: 'uuid' })
 */
```

### Type Safety Requirements
- **Always** define interfaces for data structures in `src/shared/types/`
- Use Zod schemas for AI responses (`src/ai/schemas/`)
- Prefer explicit return types over inference
- No `any` types except for Supabase casting workarounds

## üó∫Ô∏è Documentation Navigation

When working on:
- **Backend features** ‚Üí Read `docs/backend.md`
- **Frontend components** ‚Üí Read `docs/frontend.md`
- **Narrative logic** ‚Üí Read `docs/narrative-design.md`
- **System architecture** ‚Üí Read `docs/system-overview.md`
- **Tech decisions** ‚Üí Read `docs/tech-stack.md`

## üîç Winston Logging Integration

### Import Pattern
```typescript
// Backend files
import { createLogger } from '../../shared/utils/logger'
const logger = createLogger('module.name')

// Frontend files  
import { createLogger } from '../../shared/utils/loggerBrowser'
const log = createLogger('ComponentName')
```

### Logging Levels & Usage
```typescript
// System operations
logger.info('Arc created', { arcId, worldId })
logger.success('Beat generated', { beatIndex })

// Errors with context
logger.error('Failed to progress arc', error, { arcId, attempts })

// API & AI calls
logger.logAPICall('POST', '/api/worlds', requestData, response)
logger.logAICall('generateAnchors', model, input, output)

// Database operations
logger.logDBOperation('INSERT', 'world_beats', beatData, result)

// Arc progression tracking
logger.logArcProgression(worldId, arcId, beatIndex, 'Beat Generated')

// Debug for development
logger.debug('Narrative context', { previousBeats, nextAnchor })
```

## üèóÔ∏è Project Structure Patterns

### Service Layer (Backend)
- Use singleton pattern for services
- Handle errors at service level, log before throwing
- Return typed responses, never raw Supabase data

### API Routes
- Wrap handlers with `asyncHandler`
- Validate inputs before service calls
- Use nested routes for clarity: `/worlds/:worldId/arcs/:arcId/beats`

### Frontend State
- Zustand for global state (auth)
- React hooks for component state
- Use `getCurrentBeat()` helper for beat resolution

## ‚ö° Key Project Conventions

1. **Sparse Generation**: Only pre-generate 3 anchor beats (0, 7, 14)
2. **Beat Continuity**: Current beat = highest index in contiguous sequence from 0
3. **Event Context**: Always include recent events when generating beats
4. **Arc History**: Feed completed arc summaries into new arc generation
5. **Type Guards**: Check `error.code === 'PGRST116'` for Supabase not-found

## üîß Common Tasks

### Adding New AI Generation
1. Create prompt in `src/ai/prompts/`
2. Define Zod schema in `src/ai/schemas/`
3. Add method to `ai.service.ts`
4. Log with `logAICall()`

### Database Changes
1. Create migration in `supabase/migrations/`
2. Update types in shared
3. Add repository methods
4. Log operations with `logDBOperation()`

Remember: This is a **living narrative system** - every component should support dynamic, player-driven storytelling.